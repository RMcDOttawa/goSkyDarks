// Code generated by MockGen. DO NOT EDIT.
// Source: goskydarks/theSkyX (interfaces: TheSkyService)

// Package theSkyX is a generated GoMock package.
package theSkyX

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTheSkyService is a mock of TheSkyService interface.
type MockTheSkyService struct {
	ctrl     *gomock.Controller
	recorder *MockTheSkyServiceMockRecorder
}

// MockTheSkyServiceMockRecorder is the mock recorder for MockTheSkyService.
type MockTheSkyServiceMockRecorder struct {
	mock *MockTheSkyService
}

// NewMockTheSkyService creates a new mock instance.
func NewMockTheSkyService(ctrl *gomock.Controller) *MockTheSkyService {
	mock := &MockTheSkyService{ctrl: ctrl}
	mock.recorder = &MockTheSkyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTheSkyService) EXPECT() *MockTheSkyServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTheSkyService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTheSkyServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTheSkyService)(nil).Close))
}

// Connect mocks base method.
func (m *MockTheSkyService) Connect(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockTheSkyServiceMockRecorder) Connect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockTheSkyService)(nil).Connect), arg0, arg1)
}

// GetCameraTemperature mocks base method.
func (m *MockTheSkyService) GetCameraTemperature() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCameraTemperature")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCameraTemperature indicates an expected call of GetCameraTemperature.
func (mr *MockTheSkyServiceMockRecorder) GetCameraTemperature() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCameraTemperature", reflect.TypeOf((*MockTheSkyService)(nil).GetCameraTemperature))
}

// StartCooling mocks base method.
func (m *MockTheSkyService) StartCooling(arg0 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCooling", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartCooling indicates an expected call of StartCooling.
func (mr *MockTheSkyServiceMockRecorder) StartCooling(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCooling", reflect.TypeOf((*MockTheSkyService)(nil).StartCooling), arg0)
}
